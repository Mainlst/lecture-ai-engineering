name: ML Pipeline CI

on:
  pull_request:
    branches: [ main, master ]
  push: # main/masterにマージされた時も実行してアーティファクトを更新する想定
    branches: [ main, master ]

jobs:
  test_and_validate: # ジョブ名を変更
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip' # pipのキャッシュを有効化

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest great-expectations pandas scikit-learn flake8 black mypy pytest-cov
        # requirements.txt があればそれもインストール
        if [ -f day5/演習3/requirements.txt ]; then pip install -r day5/演習3/requirements.txt; fi
        # もしプロジェクトルートに requirements.txt があるなら
        # if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # --ignore オプションで特定の警告を無視できます (例: E501 line too long)
        flake8 day5/演習3 --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 day5/演習3 --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Format check with black
      run: |
        black --check day5/演習3

    - name: Run data validation tests
      working-directory: ./day5/演習3 # great_expectations.yml などがこの配下にある想定
      run: |
        # test_data.py 内でGEのコンテキストパスを指定しているので、
        # pytest の実行ディレクトリはリポジトリルートのままでも良いかもしれません。
        # 必要に応じて調整してください。
        pytest tests/test_data.py -v

    # --- Model Testing and Metrics ---
    - name: Download previous model metrics (for PRs, if base branch is main/master)
      if: github.event_name == 'pull_request' && (github.base_ref == 'main' || github.base_ref == 'master')
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub CLIがAPIを叩くために必要です
        TARGET_BRANCH: ${{ github.base_ref }}
      run: |
        echo "Attempting to download metrics for branch: $TARGET_BRANCH"
        LATEST_SUCCESSFUL_RUN_ID=$(gh run list --workflow "${{ github.workflow_id }}" --branch "$TARGET_BRANCH" --status success --limit 1 --json databaseId -q '.[0].databaseId')

        if [ -z "$LATEST_SUCCESSFUL_RUN_ID" ] || [ "$LATEST_SUCCESSFUL_RUN_ID" == "null" ]; then
          echo "No successful run found on branch '$TARGET_BRANCH' for workflow '${{ github.workflow_id }}'. Skipping download."
          # continue-on-error: true の代わりのような振る舞いのため、ここでエラー終了しない
          # この後のテストで previous_metrics_artifact が存在しないことを考慮する必要がある
        else
          echo "Found latest successful run ID on branch '$TARGET_BRANCH': $LATEST_SUCCESSFUL_RUN_ID"
          echo "Downloading artifact: model-metrics-$TARGET_BRANCH from run ID: $LATEST_SUCCESSFUL_RUN_ID"
          gh run download "$LATEST_SUCCESSFUL_RUN_ID" -R "${{ github.repository }}" -n "model-metrics-$TARGET_BRANCH" --dir ./previous_metrics_artifact
          # ダウンロード成功したかを確認するためにファイル存在チェックをしても良い
          if [ -f "./previous_metrics_artifact/current_metrics.json" ]; then # アップロード時のファイル名が current_metrics.json の場合
            echo "Artifact downloaded successfully."
          else
            echo "Artifact download seems to have failed or the expected file is not present."
            # ここで失敗扱いにするか、テスト側で処理するか
          fi
        fi
      # このステップ全体をエラーで止めないようにするには、ステップに continue-on-error: true を追加します。
      # ただし、スクリプト内でエラーハンドリングしているので、なくても良いかもしれません。
      # 必要に応じて調整してください。
      continue-on-error: true

    - name: Run model training and tests (generates current_metrics.json)
      run: |
        # test_model.py はリポジトリルート直下に current_metrics.json を作成する想定
        pytest day5/演習3/tests/test_model.py -v --cov=day5/演習3 --cov-report=xml

    - name: Upload current model metrics (on push to main/master)
      if: github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'master')
      uses: actions/upload-artifact@v4
      with:
        name: model-metrics-${{ github.ref_name }} # ブランチ固有のアーティファクト名 (main または master)
        path: ./current_metrics.json # test_model.py が生成したファイルのパス (リポジトリルート直下)
        retention-days: 90 # アーティファクトの保持期間

    # オプション: カバレッジレポートのアップロード (例: Codecov)
    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v4
    #   with:
    #     token: ${{ secrets.CODECOV_TOKEN }} # リポジトリのシークレットに設定
    #     files: ./coverage.xml # pytest-cov で生成したxmlファイル
    #     fail_ci_if_error: true